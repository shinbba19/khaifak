import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import joblib
import os
from db_utils import run_query, reset_db

st.title("üìä Dashboard + AI Valuation")

# --- Reset Button ---
if st.sidebar.button("‚ôªÔ∏è Reset Database"):
    reset_db()
    st.sidebar.success("Database ‡∏ñ‡∏π‡∏Å‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢ ‚úÖ")

# ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏• + features
model = joblib.load("price_model.pkl")
features = joblib.load("features.pkl")

# ‡πÇ‡∏´‡∏•‡∏î metrics ‡πÅ‡∏ö‡∏ö fallback
if os.path.exists("metrics.pkl"):
    metrics = joblib.load("metrics.pkl")
else:
    metrics = {"MAE": 0, "R2": 0}
    st.warning("‚ö†Ô∏è ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ metrics.pkl (‡∏Å‡∏£‡∏∏‡∏ì‡∏≤ run train_model.py ‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏ú‡∏•‡∏à‡∏£‡∏¥‡∏á)")

# üìå ‡πÅ‡∏™‡∏î‡∏á Metrics ‡∏Ç‡∏≠‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏•
st.subheader("üìà Model Performance (‡∏à‡∏≤‡∏Å‡∏ä‡∏∏‡∏î Test ‡∏ï‡∏≠‡∏ô Train)")
st.metric("MAE (‡∏ö‡∏≤‡∏ó/‡∏ï‡∏£.‡∏°.)", f"{metrics['MAE']:.2f}")
st.metric("R¬≤", f"{metrics['R2']:.2f}")

st.markdown("---")

# ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å DB
rows = run_query("SELECT * FROM properties", fetch=True)

if rows:
    df = pd.DataFrame(rows)

    # --- ‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ ---
    if "status" in df.columns and "value" in df.columns:
        st.subheader("‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞")
        chart = df.groupby("status")["value"].sum()
        st.bar_chart(chart)

    st.markdown("---")

    # --- AI Valuation ---
    st.subheader("AI Valuation: ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô")

    predictions = []
    debug_inputs = []

    for _, row in df.iterrows():
        input_dict = {f: 0 for f in features}

        if "district_type" in df.columns: input_dict["district_type"] = row.get("district_type", 1)
        if "nbr_floors" in df.columns: input_dict["nbr_floors"] = row.get("nbr_floors", 1)
        if "units" in df.columns: input_dict["units"] = row.get("units", 1)
        if "bld_age" in df.columns: input_dict["bld_age"] = row.get("bld_age", 0)
        if "room_size" in df.columns: input_dict["room_size"] = row.get("room_size", 30)

        X_input = pd.DataFrame([input_dict], columns=features).fillna(0)
        pred = model.predict(X_input)[0]
        predictions.append(pred)
        debug_inputs.append(input_dict)

    df["AI_Price_sqm"] = predictions

    # ‚úÖ ‡πÉ‡∏ä‡πâ‡∏™‡∏π‡∏ï‡∏£‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô: AI_Value = AI_Price_sqm √ó room_size
    if "room_size" in df.columns:
        df["AI_Value"] = df["AI_Price_sqm"] * df["room_size"]
    else:
        st.error("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå room_size ‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á properties (‡∏Å‡∏£‡∏∏‡∏ì‡∏≤ reset DB ‡πÉ‡∏´‡∏°‡πà)")

    st.dataframe(df)

    st.markdown("---")

    # --- ‡∏Å‡∏£‡∏≤‡∏ü Owner vs AI ---
    if "value" in df.columns and "AI_Value" in df.columns:
        st.subheader("‡∏Å‡∏£‡∏≤‡∏ü‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡πÄ‡∏™‡∏ô‡∏≠ vs AI ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô")
        plt.figure(figsize=(6,4))
        plt.scatter(df["value"], df["AI_Value"], alpha=0.7)
        plt.xlabel("‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡πÄ‡∏™‡∏ô‡∏≠ (‡∏ö‡∏≤‡∏ó)")
        plt.ylabel("‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏µ‡πà AI ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô (‡∏ö‡∏≤‡∏ó)")
        plt.title("Owner vs AI Price Comparison")
        st.pyplot(plt.gcf())

    st.markdown("---")

    # --- Debug Section ---
    st.subheader("üîç Debug Section")
    st.write("üéØ Features used by model:", features)
    st.write("üì• Sample inputs to model:")
    st.json(debug_inputs[:5])  
    st.write("üìä Predictions (AI_Price_sqm):", predictions[:5])

else:
    st.info("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå")
